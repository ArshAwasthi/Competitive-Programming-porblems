The Worst case(s) occur in linear search algorithm when -

Item is somewhere in the middle of the array
Item is the last element in the array 1
Item is present at first index of the array.
Item is not in the array at all 1

The worst case time complexity of Linear search is :

O(n) 1
O(n^2)
O(nlogn)
O(logn)

Worst case time complexity of insertion sort is ?

O(n)
O(n^2) 1
O(nlogn)
O(logn)

Worst case time complexity of Selection sort is ?

O(n)
O(n^2) 1
O(nlogn)
O(logn)




Two main measures for the efficiency of an algorithm are -

Processor and memory
Complexity and capacity
Time and space 1 
Data and space

In theoretical analysis the time factor when determining the efficiency of algorithm is measured by -

Counting microseconds
Counting the number of statements in code
Counting the number of unit operations 1
Counting the kilobytes of algorithm

If the number of primary operations of an algorithm that takes an array of size n as input are 3n^2 + 5n. The worst case time complexity of the algorithm will be ?

O(n^3)
O((n^2)*logn)
O(n^2) 1
O(n)

QUESTION:
//
What will be the Time Complexity of following code in terms of ‘n’ ?
Refer the code for C++ -
for(int i = 0; i < n; i++){
    for(; i < n; i++){
        cout << i << endl;
    }
}
Refer the same code in Java -
for(int i = 0; i < n; i++){
    for(; i < n; i++){
        System.out.println(i);
    }
}
Refer the same code in Python -
    for i in range(n):
        while i<n:
            print(i)
            i += 1
//

OPTIONS:

//
O(n) 1
O(n^2)
O(logn)
O(nlogn)
//

QUESTION:
// 
What will be the Time Complexity of following code in terms of ‘n’ ?
Note : Assume k to be a constant value
Refer the code in C++ -
  for(int i = 0; i < n; i++){
     for(int j = 1 ; j < k; j++){
        cout << (i + j ) << endl;
      }
  }
Refer the same code in Java -
for(int i = 0; i < n; i++){
       for(int j = 1 ; j < k; j++){
         System.out.println(i + j);
       }
}
Refer the same code in Python -
for i in range(n):
    for j in range(k):
        print(i+j)

\\

OPTIONS:
//
O(n^2)
O(n) 1
O(logn)
None of these
\\


For merging two sorted arrays of size m and n into a sorted array of size m+n, we require operations -

O(m * n)
O(m + n) 1
O(m) if m >= n
O(n) if n > m

What is the recurrence relation for merge sort :

T(n) = 2T(n/2)
T(n) = 2T(n/2) + k
T(n) = 2T(n/2) + O(n) 1
T(n) = 2T(n/2) + O(log n)

What is the time complexity of merge sort :

O(n)
O(n^2)
O(nlogn) 1
O(log n)


QUESTION:
// 
What is the time complexity of following code ?
int multiplyRec(int m, int n){
    if(n == 1)
        return m;
    return m + multiplyRec(m,  n - 1);  
}
\\

OPTIONS:
//
O(m*n)
O(n) 1
O(n^2)
O(m)
\\



QUESTION:
// 
What is the time complexity of following code ?
int sumOfDigits(int n){
        int sum;
        if(n < 10){
            return n;
        }
        sum = (n % 10) + sumOfDigits(n / 10);
        return sum;
}
\\

OPTIONS:
//
O(logn) - (log is to the base 10) 1
O(n)
O(n^2)
None of these
\\


QUESTION:
// 
What is the time complexity of following code for calculating nth fibonacci number
long fib(int n){
    if(n == 0 || n == 1){
         return n;
    }
    return fib(n - 1) + fib(n - 2);
}

\\

OPTIONS:
//
O(n)
O(n^2)
O(2^n) 1
O(n^3)
\\


QUESTION:
// 
The space complexity for merge sort is :
\\

OPTIONS:
//
O(n) 1
O(n^2)
O(nlogn)
O(log n)
\\


The space complexity for finding nth fibonacci number using recursion is :

O(n) 1
O(2^n)
O(log n)
O(n^2)
O(nlogn)
