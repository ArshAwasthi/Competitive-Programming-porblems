//Diameter of Binary Tree
//Given a Binary Tree, find diameter of it.
//+The diameter of a tree is the number of nodes on the longest path between two leaves in the tree. The diagram below shows two trees each with diameter nine, the leaves that form the ends of a longest path are shaded (note that there is more than one path in each tree of length nine, but no path longer than nine nodes).
//
//Input:
//First line of input contains the number of test cases T. For each test case, there will be only a single line of input which is a string representing the tree as described below: 
//1.	The values in the string are in the order of level order traversal of the tree where, numbers denotes node values, and a character “N” denotes NULL child.
//2.	For example:
//  
//For the above tree, the string will be: 1 2 3 N N 4 6 N 5 N N 7 N
//Output:
//For each testcase, in a new line, print the diameter.
//Your Task:
//You need to complete the function diameter() that takes node as parameter and returns the diameter.
//Expected Time Complexity: O(N).
//Expected Auxiliary Space: O(Height of the Tree).
//Constraints:
//1 <= T <= 100
//1 <= Number of nodes <= 10000
//1 <= Data of a node <= 1000
//Example:
//Input:
//2
//1 2 3
//10 20 30 40 60 
//Output:
//3
//4
//Explanation:
//Testcase1: The tree is
//        1
//     /      \
//   2        3
//The diameter is of 3 length.
//Testcase2: The tree is
//                           10
//                        /        \
//                     20         30
//                  /       \
//               40       60
//The diameter is of 4 length.
//
//
//
//



import java.util.LinkedList;
import java.util.Queue;
import java.io.*;
import java.util.*;

class Node {
    int data;
    Node left;
    Node right;
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class GfG {

    static Node buildTree(String str) {

        if (str.length() == 0 || str.charAt(0) == 'N') {
            return null;
        }

        String ip[] = str.split(" ");
        // Create the root of the tree
        Node root = new Node(Integer.parseInt(ip[0]));
        // Push the root to the queue

        Queue<Node> queue = new LinkedList<>();

        queue.add(root);
        // Starting from the second element

        int i = 1;
        while (queue.size() > 0 && i < ip.length) {

            // Get and remove the front of the queue
            Node currNode = queue.peek();
            queue.remove();

            // Get the current node's value from the string
            String currVal = ip[i];

            // If the left child is not null
            if (!currVal.equals("N")) {

                // Create the left child for the current node
                currNode.left = new Node(Integer.parseInt(currVal));
                // Push it to the queue
                queue.add(currNode.left);
            }

            // For the right child
            i++;
            if (i >= ip.length) break;

            currVal = ip[i];

            // If the right child is not null
            if (!currVal.equals("N")) {

                // Create the right child for the current node
                currNode.right = new Node(Integer.parseInt(currVal));

                // Push it to the queue
                queue.add(currNode.right);
            }
            i++;
        }

        return root;
    }
    static void printInorder(Node root) {
        if (root == null) return;

        printInorder(root.left);
        System.out.print(root.data + " ");

        printInorder(root.right);
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(br.readLine());

        while (t > 0) {
            String s = br.readLine();
            Node root = buildTree(s);
            Tree g = new Tree();
            System.out.println(g.diameter(root));
            t--;
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Tree {
    int longest=0;
    int getLongest(Node root){
        if(root==null)
        return 0;
        if(root.left==null&&root.right==null){
            if(longest==0)
        longest=1;
        return 1;
        }
        int left=getLongest(root.left);
        int right=getLongest(root.right);
        
     
            if(longest<(left+right+1))
            longest=left+right+1;
            
        
    return left>right?left+1:right+1;
            
            
            
    }
    /* Complete the function to get diameter of a binary tree */
    int diameter(Node root) {
        // Your code here
        getLongest(root);
        return longest;
    }
}
